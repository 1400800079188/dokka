import org.jetbrains.dokka.*
import org.jetbrains.dokka.gradle.*
import org.jetbrains.kotlin.gradle.tasks.*

import groovy.transform.CompileStatic
import java.util.concurrent.Callable

buildscript {
    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$test_kotlin_version"
    }
}

plugins {
    id 'org.jetbrains.dokka'
}

apply plugin: 'kotlin'

@CompileStatic
def configureDokkaTypeSafely(DokkaTask dokka) {
    dokka.with {
        moduleName = "some String"
        outputFormat = "some String"
        outputDirectory = "some String"
        dokkaFatJar = file("some File")
        cacheRoot = null as String
        impliedPlatforms = new ArrayList<String>()

        kotlinTasks(new Callable<List<Object>>() {
            @Override
            List<Object> call() {
                return defaultKotlinTasks()
            }
        })
    }
    dokka.extensions.findByName("configuration").with {

        classpath = Collections.singleton(file("someClassDir"))
        includes = Collections.emptyList()
        samples = Collections.emptyList()
        jdkVersion = 6
        sourceDirs = Collections.<File> emptyList()
        sourceRoots = new ArrayList<GradleSourceRootImpl>()

        includeNonPublic = false
        skipDeprecated = false
        skipEmptyPackages = true
        reportUndocumented = true
        perPackageOptions = new ArrayList<GradlePackageOptionsImpl>()
        impliedPlatforms = Collections.<String> emptyList()
        externalDocumentationLinks = new ArrayList<DokkaConfiguration.ExternalDocumentationLink>()
        noStdlibLink = false
        languageVersion = null as String
        apiVersion = null as String
        sourceRoot(new Action<GradleSourceRootImpl>() {
            @Override
            void execute(GradleSourceRootImpl sourceRoot) {
                sourceRoot.path = "some String"
            }
        })
        packageOptions(new Action<GradlePackageOptionsImpl>() {
            @Override
            void execute(GradlePackageOptionsImpl packageOptions) {
                packageOptions.prefix = "some String"
            }
        })
        externalDocumentationLink(new Action<DokkaConfiguration.ExternalDocumentationLink.Builder>() {
            @Override
            void execute(DokkaConfiguration.ExternalDocumentationLink.Builder builder) {
                builder.url = uri("some URI").toURL()
            }
        })
    }
}

project.tasks.withType(DokkaTask) { dokka ->
    configureDokkaTypeSafely(dokka)
}
